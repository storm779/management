<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org"
      xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>What's New - Visakh Refinery Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- DataTables CSS -->
    <link href="https://cdn.datatables.net/2.3.2/css/dataTables.bootstrap5.min.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css" rel="stylesheet">
    <link th:href="@{/css/style.css}" rel="stylesheet">
    <style>
        /* Reduced padding for statistics cards */
        .stat-card .card-body {
            padding: 1rem 0.75rem !important;
        }
        .stat-card .fs-2 {
            font-size: 1.5rem !important;
        }
        .stat-card h4 {
            font-size: 1.1rem !important;
            margin-bottom: 0.25rem !important;
        }
        .stat-card p {
            font-size: 0.8rem !important;
            margin-bottom: 0 !important;
        }
        
        /* DataTables styling to match reference image */
        .dataTables_wrapper {
            padding: 0;
        }
        
        /* Ensure search and length controls are visible */
        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter {
            margin-bottom: 1rem;
            display: flex !important;
            visibility: visible !important;
            align-items: center;
        }
        
        .dataTables_wrapper .dataTables_length label,
        .dataTables_wrapper .dataTables_filter label {
            font-weight: 500;
            margin-bottom: 0;
            display: flex;
            align-items: center;
            color: #495057;
        }
        
        .dataTables_wrapper .dataTables_length select,
        .dataTables_wrapper .dataTables_filter input {
            margin-left: 0.5rem;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.375rem 0.75rem;
            background: white;
            color: #495057;
        }
        
        /* Specific styling for search input */
        .dataTables_wrapper .dataTables_filter input[type="search"] {
            appearance: none !important;
            -webkit-appearance: none !important;
            outline: none;
            width: 200px;
            display: inline-block !important;
        }
        
        .dataTables_wrapper .dataTables_filter input[type="search"]:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        /* Force visibility of controls */
        .dataTables_wrapper .dataTables_length,
        .dataTables_wrapper .dataTables_filter,
        .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            display: block !important;
            visibility: visible !important;
        }
        
        /* Force visibility of DataTables controls */
        .dataTables_length {
            float: left !important;
            clear: left !important;
        }
        
        .dataTables_filter {
            float: right !important;
            clear: right !important;
            text-align: right !important;
        }
        
        /* Clean DataTables pagination styling */
        .dataTables_paginate .paginate_button {
            padding: 8px 12px !important;
            margin: 0 2px !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 4px !important;
            background: white !important;
            color: #495057 !important;
            text-decoration: none !important;
        }
        
        .dataTables_paginate .paginate_button:hover {
            background: #f8f9fa !important;
            border-color: #adb5bd !important;
        }
        
        .dataTables_paginate .paginate_button.current {
            background: #0d6efd !important;
            border-color: #0d6efd !important;
            color: white !important;
        }
        
        .dataTables_paginate .paginate_button.disabled {
            color: #6c757d !important;
            background: #f8f9fa !important;
            border-color: #dee2e6 !important;
            cursor: not-allowed !important;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .dataTables_filter,
            .dataTables_length {
                float: none !important;
                text-align: left !important;
                margin-bottom: 0.5rem;
            }
        }
        
        .dataTables_wrapper .dataTables_info {
            color: #6c757d;
            margin-top: 1rem;
        }
        
        .dataTables_wrapper .dataTables_paginate {
            margin-top: 1rem;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button {
            padding: 0.375rem 0.75rem;
            margin-left: 0.125rem;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            background: white;
            color: #495057;
            text-decoration: none;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button.current {
            background: #0d6efd;
            border-color: #0d6efd;
            color: white;
        }
        
        .dataTables_wrapper .dataTables_paginate .paginate_button.disabled {
            color: #6c757d;
            cursor: not-allowed;
            background: #f8f9fa;
            border-color: #dee2e6;
        }
        
        /* Table styling */
        #whatsNewTable {
            border-collapse: collapse;
            width: 100%;
        }
        
        #whatsNewTable thead th {
            background-color: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            padding: 12px 8px;
            font-weight: 600;
            color: #495057;
            text-align: left;
            position: relative;
        }
        
        #whatsNewTable thead th.sorting,
        #whatsNewTable thead th.sorting_asc,
        #whatsNewTable thead th.sorting_desc {
            cursor: pointer;
            padding-right: 30px;
        }
        
        #whatsNewTable thead th.sorting:after,
        #whatsNewTable thead th.sorting_asc:after,
        #whatsNewTable thead th.sorting_desc:after {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            font-family: "Bootstrap Icons";
            font-size: 12px;
            color: #6c757d;
        }
        
        #whatsNewTable thead th.sorting:after {
            content: "\f296";
        }
        
        #whatsNewTable thead th.sorting_asc:after {
            content: "\f295";
            color: #0d6efd;
        }
        
        #whatsNewTable thead th.sorting_desc:after {
            content: "\f297";
            color: #0d6efd;
        }
        
        #whatsNewTable tbody tr {
            border-bottom: 1px solid #dee2e6;
            transition: background-color 0.2s ease;
        }
        
        #whatsNewTable tbody tr:hover {
            background-color: rgba(13, 110, 253, 0.05);
        }
        
        #whatsNewTable tbody td {
            padding: 12px 8px;
            vertical-align: middle;
        }
        
        /* Badge styling */
        .priority-badge {
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25em 0.6em;
            border-radius: 0.375rem;
        }
        
        /* Action buttons */
        .btn-sm {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }
        
        /* Filter section styling */
        .filter-section {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.5rem;
            padding: 1rem;
            margin-bottom: 1.5rem;
        }
        
        .filter-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: end;
        }
        
        .filter-group {
            min-width: 150px;
            flex: 1;
        }
        
        .filter-buttons {
            display: flex;
            gap: 0.5rem;
        }
        
        @media (max-width: 768px) {
            .filter-row {
                flex-direction: column;
                align-items: stretch;
            }
            
            .filter-buttons {
                justify-content: stretch;
            }
            
            .filter-buttons .btn {
                flex: 1;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav th:replace="~{layout/main :: navigation}"></nav>

    <!-- Main Content -->
    <main class="container-fluid mt-3">
        <!-- Success/Error Messages -->
        <div th:if="${success}" class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>
            <span th:text="${success}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>

        <div th:if="${error}" class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <span th:text="${error}"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>

        <!-- Page Header -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="text-success">
                        <i class="bi bi-megaphone me-2"></i>What's New
                    </h2>
                    <div sec:authorize="hasRole('ADMIN')">
                        <a th:href="@{/whatsnew/add}" class="btn btn-success">
                            <i class="bi bi-plus-circle me-1"></i>Add Announcement
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="row mb-4">
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card stat-card border-success">
                    <div class="card-body text-center">
                        <i class="bi bi-check-circle-fill text-success fs-2 mb-2"></i>
                        <h4 class="text-success" th:text="${activeCount}">0</h4>
                        <p class="text-muted mb-0">Active Items</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card stat-card border-primary">
                    <div class="card-body text-center">
                        <i class="bi bi-list-ul text-primary fs-2 mb-2"></i>
                        <h4 class="text-primary" th:text="${totalCount}">0</h4>
                        <p class="text-muted mb-0">Total Items</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-6 mb-3">
                <div class="card stat-card border-info">
                    <div class="card-body text-center">
                        <i class="bi bi-file-earmark-text text-info fs-2 mb-2"></i>
                        <h4 class="text-info" th:text="${totalPages}">0</h4>
                        <p class="text-muted mb-0">Total Pages</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Advanced Filters -->
        <div class="card mb-3">
            <div class="card-header">
                <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse" 
                        data-bs-target="#advancedFilters" aria-expanded="false">
                    <i class="bi bi-funnel me-1"></i>Advanced Filters
                </button>
            </div>
            <div class="collapse" id="advancedFilters">
                <div class="card-body">
                    <form class="filter-section">
                        <div class="filter-row">
                            <div class="filter-group">
                                <label for="priorityFilter" class="form-label">Priority</label>
                                <select class="form-select" id="priorityFilter">
                                    <option value="">All Priorities</option>
                                    <option value="1">Highest</option>
                                    <option value="2">Normal</option>
                                    <option value="3">Lowest</option>
                                </select>
                            </div>
                            <div class="filter-group">
                                <label for="dateFromFilter" class="form-label">Valid From</label>
                                <input type="date" class="form-control" id="dateFromFilter">
                            </div>
                            <div class="filter-group">
                                <label for="dateToFilter" class="form-label">Valid To</label>
                                <input type="date" class="form-control" id="dateToFilter">
                            </div>
                            <div class="filter-group">
                                <label for="titleFilter" class="form-label">Search titles...</label>
                                <input type="text" class="form-control" id="titleFilter" placeholder="Search titles...">
                            </div>
                            <div class="filter-buttons">
                                <button type="button" class="btn btn-primary" onclick="applyFilters()">
                                    <i class="bi bi-funnel me-1"></i>Apply
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="clearFilters()">
                                    <i class="bi bi-x-circle me-1"></i>Clear
                                </button>
                            </div>
                        </div>
                        <div class="row mt-2" id="filterStatusRow" style="display: none;">
                            <div class="col-12">
                                <small id="filterStatus" class="text-muted"></small>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- What's New List -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-list-ul me-2"></i>Announcements List
                    <span class="badge bg-primary" th:text="${whatsNewPage.totalElements}">0</span>
                </h5>
                
                <!-- Bulk Actions for Admins -->
                <div sec:authorize="hasRole('ADMIN')" class="bulk-actions" style="display: none;">
                    <button type="button" class="btn btn-outline-danger btn-sm" id="bulkDeleteBtn" 
                            onclick="bulkAction('delete')" style="display: none;">
                        <i class="bi bi-trash me-1"></i>Delete Selected
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover" id="whatsNewTable">
                        <thead>
                            <tr>
                                <th sec:authorize="hasRole('ADMIN')" style="width: 40px;">
                                    <input type="checkbox" class="form-check-input" id="selectAll" 
                                           onchange="toggleSelectAll()">
                                </th>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Priority</th>
                                <th>Valid From</th>
                                <th>Valid To</th>
                                <th sec:authorize="hasRole('ADMIN')" class="text-center" style="width: 120px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr th:if="${whatsNewPage.empty}">
                                <td th:colspan="${#authorization.expression('hasRole(''ADMIN'')')} ? 7 : 5" 
                                    class="text-center text-muted py-4">
                                    <i class="bi bi-inbox fs-1 d-block mb-2"></i>
                                    No announcements found
                                </td>
                            </tr>
                            <tr th:each="item : ${whatsNewPage.content}" th:unless="${whatsNewPage.empty}">
                                <td sec:authorize="hasRole('ADMIN')">
                                    <input type="checkbox" class="form-check-input whatsnew-checkbox" 
                                           th:value="${item.id}" onchange="updateBulkActions()">
                                </td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <span class="fw-medium" th:text="${item.title}">Sample Title</span>
                                        <a th:if="${item.url and !#strings.isEmpty(item.url)}" 
                                           th:href="${item.url}" target="_blank" class="text-primary small">
                                            <i class="bi bi-link-45deg me-1"></i>External Link
                                        </a>
                                    </div>
                                </td>
                                <td>
                                    <span th:if="${item.description and !#strings.isEmpty(item.description)}" 
                                          th:text="${#strings.abbreviate(item.description, 100)}">Description</span>
                                    <span th:unless="${item.description and !#strings.isEmpty(item.description)}" 
                                          class="text-muted fst-italic">No description</span>
                                </td>
                                <td>
                                    <span th:switch="${item.priority}" class="badge priority-badge">
                                        <span th:case="1" class="badge bg-danger" th:text="${item.displayOrder}">1</span>
                                        <span th:case="2" class="badge bg-primary" th:text="${item.displayOrder}">2</span>
                                        <span th:case="3" class="badge bg-secondary" th:text="${item.displayOrder}">3</span>
                                        <span th:case="*" class="badge bg-secondary" th:text="${item.displayOrder}">-</span>
                                    </span>
                                </td>
                                <td th:text="${#temporals.format(item.validFrom, 'dd-MMM-yyyy')}">07-Jun-2025</td>
                                <td>
                                    <span th:if="${item.validTo}" 
                                          th:text="${#temporals.format(item.validTo, 'dd-MMM-yyyy')}">11-Jun-2025</span>
                                    <span th:unless="${item.validTo}" class="text-muted fst-italic">No expiry</span>
                                </td>
                                <td sec:authorize="hasRole('ADMIN')" class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <a th:href="@{/whatsnew/view/{id}(id=${item.id})}" 
                                           class="btn btn-outline-info btn-sm" title="View">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <a th:href="@{/whatsnew/edit/{id}(id=${item.id})}" 
                                           class="btn btn-outline-primary btn-sm" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a th:href="@{/whatsnew/delete/{id}(id=${item.id})}" 
                                           class="btn btn-outline-danger btn-sm" title="Delete"
                                           onclick="return confirm('Are you sure you want to delete this announcement?')">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer -->
    <footer th:replace="~{layout/main :: footer}"></footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/2.3.2/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.3.2/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/responsive.bootstrap5.min.js"></script>

    <script>
        // Declare whatsNewTable in global scope so filter functions can access it
        let whatsNewTable;
        let dataTableInitialized = false;
        
        // Debounce function to limit rapid function calls
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        $(document).ready(function() {
            // Initialize DataTable
            whatsNewTable = $('#whatsNewTable').DataTable({
                responsive: true,
                pageLength: 10,
                lengthMenu: [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
                order: [[1, 'asc']],
                columnDefs: [
                    {
                        targets: [0],
                        orderable: false,
                        visible: document.getElementById('selectAll') !== null
                    },
                    {
                        targets: [-1],
                        orderable: false,
                        visible: document.getElementById('selectAll') !== null
                    }
                ],
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                language: {
                    search: "Search announcements:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ entries",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    },
                    emptyTable: "No announcements available",
                    zeroRecords: "No matching announcements found"
                },
                initComplete: function() {
                    // Ensure search controls are visible after initialization
                    console.log('What\'s New DataTable initialized successfully');
                    $('.dataTables_filter').show();
                    $('.dataTables_length').show();
                    dataTableInitialized = true;
                    
                    // Set up real-time filtering for title input
                    $('#titleFilter').on('keyup', debounce(function() {
                        applyFilters();
                    }, 300));
                }
            });
        });

        // Bulk Actions JavaScript
        function toggleSelectAll() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.whatsnew-checkbox');
            
            if (selectAllCheckbox) {
                checkboxes.forEach(checkbox => {
                    checkbox.checked = selectAllCheckbox.checked;
                });
                
                updateBulkActions();
            }
        }
        
        function updateBulkActions() {
            const checkedBoxes = document.querySelectorAll('.whatsnew-checkbox:checked');
            const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
            
            // Only update bulk actions if admin elements exist
            if (bulkDeleteBtn) {
                if (checkedBoxes.length > 0) {
                    bulkDeleteBtn.style.display = 'inline-block';
                } else {
                    bulkDeleteBtn.style.display = 'none';
                }
            }

            // Update select all checkbox state only if it exists
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                const allCheckboxes = document.querySelectorAll('.whatsnew-checkbox');
                
                if (checkedBoxes.length === 0) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = false;
                } else if (checkedBoxes.length === allCheckboxes.length) {
                    selectAllCheckbox.indeterminate = false;
                    selectAllCheckbox.checked = true;
                } else {
                    selectAllCheckbox.indeterminate = true;
                }
            }
        }
        
        function bulkAction(action) {
            const checkedBoxes = document.querySelectorAll('.whatsnew-checkbox:checked');
            const ids = Array.from(checkedBoxes).map(cb => cb.value);
            
            if (ids.length === 0) {
                alert('Please select at least one announcement.');
                return;
            }
            
            let confirmMessage;
            let url;

            switch (action) {
                case 'delete':
                    confirmMessage = `Are you sure you want to delete ${ids.length} selected announcement(s)?`;
                    url = '/whatsnew/bulk-delete';
                    break;
                default:
                    return;
            }
            
            if (confirm(confirmMessage)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = url;
                
                ids.forEach(id => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'ids';
                    input.value = id;
                    form.appendChild(input);
                });
                
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Advanced Filter Functions
        function applyFilters() {
            console.log('ApplyFilters called (What\'s New)');
            
            // Check if DataTable is properly initialized
            if (!dataTableInitialized || !whatsNewTable || !$.fn.DataTable.isDataTable('#whatsNewTable')) {
                console.error('DataTable not initialized yet');
                alert('Please wait for the table to finish loading before applying filters.');
                return false;
            }
            
            try {
                const priorityFilter = $('#priorityFilter').val();
                const dateFromFilter = $('#dateFromFilter').val();
                const dateToFilter = $('#dateToFilter').val();
                const titleFilter = $('#titleFilter').val();
                
                console.log('Filter values:', {priorityFilter, dateFromFilter, dateToFilter, titleFilter});
                
                // Clear existing searches and custom filters
                whatsNewTable.search('').columns().search('');
                
                // Remove any existing custom search functions
                $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(function(fn) {
                    return fn.name !== 'customFilterWN';
                });
                
                // Determine column indices based on admin status
                const isAdmin = document.getElementById('selectAll') !== null;
                const titleColumn = isAdmin ? 1 : 0;
                const descriptionColumn = isAdmin ? 2 : 1;
                const priorityColumn = isAdmin ? 3 : 2;
                const validFromColumn = isAdmin ? 4 : 3;
                const validToColumn = isAdmin ? 5 : 4;
                
                // Apply combined custom filter for all criteria
                if (priorityFilter || dateFromFilter || dateToFilter || titleFilter) {
                    const customFilter = function(settings, data, dataIndex) {
                        if (settings.nTable.id !== 'whatsNewTable') {
                            return true;
                        }
                        
                        // Title filter - search in title column
                        if (titleFilter && titleFilter.trim() !== '') {
                            const titleData = data[titleColumn] || '';
                            if (!titleData.toLowerCase().includes(titleFilter.toLowerCase())) {
                                return false;
                            }
                        }
                        
                        // Priority filter - extract priority from badge classes
                        if (priorityFilter && priorityFilter !== '') {
                            const priorityData = data[priorityColumn] || '';
                            
                            // Extract priority from the HTML badge
                            let priority = '';
                            if (priorityData.includes('bg-danger')) {
                                priority = '1';
                            } else if (priorityData.includes('bg-primary')) {
                                priority = '2';  
                            } else if (priorityData.includes('bg-secondary')) {
                                priority = '3';
                            }
                            
                            if (priority !== priorityFilter) {
                                return false;
                            }
                        }
                        
                        // Date filters
                        if (dateFromFilter || dateToFilter) {
                            const validFromData = data[validFromColumn] || '';
                            const validToData = data[validToColumn] || '';
                            
                            // Parse dates from table data (format: dd-MMM-yyyy)
                            const parseTableDate = (dateStr) => {
                                if (!dateStr || dateStr.trim() === '' || dateStr === 'No expiry') return null;
                                
                                try {
                                    const parts = dateStr.trim().split('-');
                                    if (parts.length !== 3) return null;
                                    
                                    const months = {
                                        'Jan': 0, 'Feb': 1, 'Mar': 2, 'Apr': 3, 'May': 4, 'Jun': 5,
                                        'Jul': 6, 'Aug': 7, 'Sep': 8, 'Oct': 9, 'Nov': 10, 'Dec': 11
                                    };
                                    
                                    const day = parseInt(parts[0]);
                                    const month = months[parts[1]];
                                    const year = parseInt(parts[2]);
                                    
                                    if (isNaN(day) || month === undefined || isNaN(year)) return null;
                                    
                                    return new Date(year, month, day);
                                } catch (e) {
                                    console.warn('Error parsing date:', dateStr, e);
                                    return null;
                                }
                            };
                            
                            const validFromDate = parseTableDate(validFromData);
                            const validToDate = parseTableDate(validToData);
                            
                            // Convert filter dates
                            const filterFromDate = dateFromFilter ? new Date(dateFromFilter) : null;
                            const filterToDate = dateToFilter ? new Date(dateToFilter) : null;
                            
                            // Apply date range logic
                            if (filterFromDate && validFromDate && validFromDate < filterFromDate) {
                                return false;
                            }
                            
                            if (filterToDate) {
                                // If validTo exists, check it; otherwise use validFrom
                                const dateToCheck = validToDate || validFromDate;
                                if (dateToCheck && dateToCheck > filterToDate) {
                                    return false;
                                }
                            }
                        }
                        
                        return true;
                    };
                    
                    // Add name property for identification
                    customFilter.name = 'customFilterWN';
                    $.fn.dataTable.ext.search.push(customFilter);
                    console.log('Applied combined filters');
                }
                
                // Redraw the table with filters applied
                whatsNewTable.draw();
                console.log('Table redrawn with filters');
                
                // Update filter status
                updateFilterStatus();
                
                return false; // Prevent form submission
                
            } catch (error) {
                console.error('Error applying filters:', error);
                alert('Error applying filters. Please try again.');
                return false;
            }
        }
        
        function clearFilters() {
            console.log('ClearFilters called (What\'s New)');
            
            // Check if DataTable is properly initialized
            if (!dataTableInitialized || !whatsNewTable || !$.fn.DataTable.isDataTable('#whatsNewTable')) {
                console.error('DataTable not initialized yet');
                alert('Please wait for the table to finish loading before clearing filters.');
                return false;
            }
            
            try {
                // Clear all filter inputs
                $('#priorityFilter').val('');
                $('#dateFromFilter').val('');
                $('#dateToFilter').val('');
                $('#titleFilter').val('');
                
                // Clear all searches
                whatsNewTable.search('').columns().search('');
                
                // Clear custom search functions
                $.fn.dataTable.ext.search = $.fn.dataTable.ext.search.filter(function(fn) {
                    return fn.name !== 'customFilterWN';
                });
                
                // Redraw table
                whatsNewTable.draw();
                console.log('Filters cleared and table redrawn');
                
                // Update filter status
                updateFilterStatus();
                
                return false; // Prevent form submission
                
            } catch (error) {
                console.error('Error clearing filters:', error);
                alert('Error clearing filters. Please try again.');
                return false;
            }
        }
        
        function updateFilterStatus() {
            const priorityFilter = $('#priorityFilter').val();
            const dateFromFilter = $('#dateFromFilter').val();
            const dateToFilter = $('#dateToFilter').val();
            const titleFilter = $('#titleFilter').val();
            
            const activeFilters = [];
            if (priorityFilter) activeFilters.push('Priority');
            if (dateFromFilter) activeFilters.push('Valid From');
            if (dateToFilter) activeFilters.push('Valid To');
            if (titleFilter) activeFilters.push('Title');
            
            const statusElement = $('#filterStatus');
            const statusRow = $('#filterStatusRow');
            
            if (activeFilters.length > 0) {
                statusElement.text(`Active filters: ${activeFilters.join(', ')}`);
                statusElement.removeClass('text-muted').addClass('text-info');
                statusRow.show();
            } else {
                statusRow.hide();
            }
        }

        // Initialize bulk actions on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateBulkActions();
            updateFilterStatus();
        });
    </script>
</body>
</html> 